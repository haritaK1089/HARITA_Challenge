#######################################################################################
#Program Name: EC2 setup with Hello World! web application
#Author:Harita Kambhampati
#Version:1.0
########################################################################################
---
# Setting up hosts, connection and variables
- hosts: local 
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: webservers_sg
    image: ami-0080e4c5bc078760e
    keypair: Newkeypair
    region: us-east-1
    count: 1
  vars_files:
    - aws_keys.yml
  tasks:
  # Creating a scurity group called webservers_sg and opening ports for SSH, HTTP and HTTPS
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webserver security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
  # Launching EC2 instance
    - name: Launch the new EC2 instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{ count }}"
      register: ec2
  # Adding newly created host under webservers group
    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: webservers
      with_items: "{{ ec2.instances }}"
# Appling tags to generated EC2 Instance
    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: webserver
 # Allowing instance to start and run
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        state: started
      with_items: "{{ ec2.instances }}"
# Instance is setup and running
- hosts: webservers
  remote_user: ec2-user
  become: yes
  gather_facts: yes
  pre_tasks:
  - name: Install Python
    yum:
      name: python
      state: present
  tasks:
  - name: Install Apache
    yum:
      name: httpd
      state: present
  - name: Enable apach2 service
    service:
      name: httpd
      state: started
      enabled: yes
  - name: Copy index.html to document root
    copy:
      src: /home/vagrant/HARITA_Challenge/ansible_ec2/index.html
      dest: /var/www/html/
      mode: 0744
  - name: Add DNS name to the ip address
    route53:
      state: present
      zone: cloud.learnstorage.online.
      record: cloud.learnstorage.online.
      type: A
      ttl: 60
      value: "{{ item.public_ip }}"
      wait: yes
  - name: Install mod_ssl certificate
    yum:
      name: mod_ssl
      state: present
  - name: Copy certs to appropriate locations
    copy: 
      src: /home/vagrant/HARITA_Challenge/ansible_ec2/webserver.crt
      dest: /etc/pki/tls/certs/
      mode: 600
  - name: Copy private cert to appropriate locations
    copy: 
      src: /home/vagrant/HARITA_Challenge/ansible_ec2/webserver.pem
      dest: /etc/pki/tls/private/
      mode: 600
  - name: Replace contents of ssl.conf
    replace:
      path: /etc/httpd/conf.d/ssl.conf
      regexp: '/etc/pki/tls/certs/*.crt$'
      replace: '/etc/pki/tls/certs/webserver.crt'
      backup: yes
  - name: Replace contents of ssl.conf
    replace:
      path: /etc/httpd/conf.d/ssl.conf
      regexp: '/etc/pki/tls/private/*$'
      replace: '/etc/pki/tls/certs/webserver.pem'
      backup: yes
  - name: Replace contents of ssl.conf
    replace:
      path: /etc/httpd/conf.d/ssl.conf
      regexp: '/etc/pki/tls/certs/*.crt$'
      replace: '/etc/pki/tls/certs/webserver.crt'
      backup: yes
  - name: Add port 443 block
    blockinfile:
      path: /etc/httpd/conf.d/ssl.conf
      insertafter: EOF
      backup: yes
      block: "<VirtualHost *:443>
      ServerName cloud.learnstorage.online
      Document Root /var/www/html
      Directory Index index.html
      </VirtualHost>"
  - name: Redirect http traffic to https
    blockinfile:
      path: /etc/httpd/conf/httpd.conf
      insertafter: EOF
      backup: yes
      block: "<VirtualHost *:80>
      RewriteEngine On
      RewriteCond %{HTTP:X-Forwarded-Proto} =http
      RewriteRule .* https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
      </VirtualHost>"
  - name: Restart httpd
    service: 
      name: httpd
      state: restarted
...
